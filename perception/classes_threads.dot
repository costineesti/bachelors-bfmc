digraph "classes_threads" {
rankdir=BT
charset="utf-8"
"DemoCarBFMC.perception.threads.sign_detection.signDetection.ColorSegmentation" [color="black", fontcolor="black", label=<{ColorSegmentation|colorMask<br ALIGN="LEFT"/>colorMaxRanges : dict<br ALIGN="LEFT"/>colorMinRanges : dict<br ALIGN="LEFT"/>morphKernel<br ALIGN="LEFT"/>|getColorMask()<br ALIGN="LEFT"/>reduceNoise()<br ALIGN="LEFT"/>segment(image, colorKey)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DemoCarBFMC.perception.threads.lane_detection.distanceError.DistanceError" [color="black", fontcolor="black", label=<{DistanceError|linesDifferenceDict : dict<br ALIGN="LEFT"/>roadWidthInCM : int<br ALIGN="LEFT"/>|getError(laneData)<br ALIGN="LEFT"/>pixelsToCentimeters(px, laneData, yLevel)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DemoCarBFMC.perception.threads.sign_detection.signDetection.ImageClassifier" [color="black", fontcolor="black", label=<{ImageClassifier|CLASSES : dict<br ALIGN="LEFT"/>model : NoneType<br ALIGN="LEFT"/>|classify(sign)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DemoCarBFMC.perception.threads.sign_detection.signDetection.ImageEnhancement" [color="black", fontcolor="black", label=<{ImageEnhancement|image<br ALIGN="LEFT"/>sharpenedImage<br ALIGN="LEFT"/>unsharpMask<br ALIGN="LEFT"/>|getImage()<br ALIGN="LEFT"/>unsharpImage(sharpening, kSize, sigma)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DemoCarBFMC.perception.threads.lane_detection.imagePreprocess.ImagePreprocess" [color="black", fontcolor="black", label=<{ImagePreprocess|<br ALIGN="LEFT"/>|preprocess(image)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DemoCarBFMC.perception.threads.sign_detection.signDetection.ImageSegmentation" [color="black", fontcolor="black", label=<{ImageSegmentation|binaryMap<br ALIGN="LEFT"/>contours<br ALIGN="LEFT"/>image<br ALIGN="LEFT"/>morphKernel<br ALIGN="LEFT"/>rectData : list<br ALIGN="LEFT"/>|analyzeShape()<br ALIGN="LEFT"/>createBinaryMap(minTruncLevel, maxTruncLevel)<br ALIGN="LEFT"/>getContours()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DemoCarBFMC.perception.threads.intersection_detection.intersectionDetection.IntersectionDetection" [color="black", fontcolor="black", label=<{IntersectionDetection|height : int<br ALIGN="LEFT"/>intersectionDistance : int<br ALIGN="LEFT"/>lineTracker<br ALIGN="LEFT"/>offset<br ALIGN="LEFT"/>preprocess<br ALIGN="LEFT"/>validSigns : list<br ALIGN="LEFT"/>width : int<br ALIGN="LEFT"/>|detect(image, sign)<br ALIGN="LEFT"/>distance(line)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DemoCarBFMC.perception.threads.lane_detection.laneDetect.LaneDetect" [color="black", fontcolor="black", label=<{LaneDetect|height<br ALIGN="LEFT"/>laneWidth : int<br ALIGN="LEFT"/>lastLeftFit : NoneType<br ALIGN="LEFT"/>lastRightFit : NoneType<br ALIGN="LEFT"/>sanity : bool<br ALIGN="LEFT"/>widowMinPixels<br ALIGN="LEFT"/>width<br ALIGN="LEFT"/>windowHeight<br ALIGN="LEFT"/>windowWidth<br ALIGN="LEFT"/>windowsNumber : int<br ALIGN="LEFT"/>|calculateAngle(slope)<br ALIGN="LEFT"/>detect(image)<br ALIGN="LEFT"/>fastSearch(image, leftFit, rightFit)<br ALIGN="LEFT"/>getHistogram(image, percent)<br ALIGN="LEFT"/>getHistogramPeaks(image)<br ALIGN="LEFT"/>getLaneLines(leftLine, rightLine)<br ALIGN="LEFT"/>getLine(line)<br ALIGN="LEFT"/>getMiddleLine(leftLine, rightLine)<br ALIGN="LEFT"/>sanityCheck(leftLine, rightLine, debug)<br ALIGN="LEFT"/>searchLane(image)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DemoCarBFMC.perception.threads.intersection_detection.lineTracker.LineTracker" [color="black", fontcolor="black", label=<{LineTracker|disappeared : int<br ALIGN="LEFT"/>id : int<br ALIGN="LEFT"/>line : NoneType<br ALIGN="LEFT"/>maxDisappeared : int<br ALIGN="LEFT"/>|add(line)<br ALIGN="LEFT"/>distance(line1, line2)<br ALIGN="LEFT"/>remove()<br ALIGN="LEFT"/>update(line)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DemoCarBFMC.perception.threads.intersection_detection.preprocess.Preprocess" [color="black", fontcolor="black", label=<{Preprocess|<br ALIGN="LEFT"/>|multiScaleGaussianBlur(image, kernel_sizes, standard_deviations)<br ALIGN="LEFT"/>preprocess(image)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DemoCarBFMC.perception.threads.sign_detection.reverseCoordinates.ReverseCoordinates" [color="black", fontcolor="black", label=<{ReverseCoordinates|<br ALIGN="LEFT"/>|reverseCoordinates(coords, inverseTransformMatrix)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DemoCarBFMC.perception.threads.lane_detection.reverseCoordinates.ReverseCoordinates" [color="black", fontcolor="black", label=<{ReverseCoordinates|<br ALIGN="LEFT"/>|reverseLineCoordinates(lanes, inverseTransformMatrix)<br ALIGN="LEFT"/>reverseWindowsCoordinates(windows, inverseTransformMatrix)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DemoCarBFMC.perception.threads.sign_detection.signDetection.SignDetection" [color="black", fontcolor="black", label=<{SignDetection|colorLength : int<br ALIGN="LEFT"/>colorSegmentation<br ALIGN="LEFT"/>imageClassifier<br ALIGN="LEFT"/>|cropImage(image, rectData)<br ALIGN="LEFT"/>detect(image, saveData)<br ALIGN="LEFT"/>filterRect(rectData)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Brain.src.templates.threadwithstop.ThreadWithStop" [color="black", fontcolor="black", label=<{ThreadWithStop|<br ALIGN="LEFT"/>|stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DemoCarBFMC.perception.threads.utils.warpPerspective.WarpPerspective" [color="black", fontcolor="black", label=<{WarpPerspective|imageShape : tuple<br ALIGN="LEFT"/>inverseTransformMatrix<br ALIGN="LEFT"/>regionOfInterest<br ALIGN="LEFT"/>transformMatrix<br ALIGN="LEFT"/>|CalculateTransformMatrices()<br ALIGN="LEFT"/>inverseTransform(image)<br ALIGN="LEFT"/>transform(image)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"Brain.src.templates.workerprocess.WorkerProcess" [color="black", fontcolor="black", label=<{WorkerProcess|daemon : bool<br ALIGN="LEFT"/>queuesList<br ALIGN="LEFT"/>threads : list<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"numpy.core.numerictypes.int32" [color="black", fontcolor="black", label=<{int32|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
".ndarray" [color="black", fontcolor="black", label=<{ndarray|T : ndarray<br ALIGN="LEFT"/>base : NoneType<br ALIGN="LEFT"/>ctypes : NoneType<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>dtype : NoneType<br ALIGN="LEFT"/>flags : NoneType<br ALIGN="LEFT"/>flat : ndarray<br ALIGN="LEFT"/>imag : ndarray<br ALIGN="LEFT"/>itemsize : NoneType<br ALIGN="LEFT"/>nbytes : NoneType<br ALIGN="LEFT"/>ndim : NoneType<br ALIGN="LEFT"/>real : ndarray<br ALIGN="LEFT"/>shape : ndarray<br ALIGN="LEFT"/>size : NoneType<br ALIGN="LEFT"/>strides : NoneType<br ALIGN="LEFT"/>|all(axis, out, keepdims)<br ALIGN="LEFT"/>any(axis, out, keepdims)<br ALIGN="LEFT"/>argmax(axis, out)<br ALIGN="LEFT"/>argmin(axis, out)<br ALIGN="LEFT"/>argpartition(kth, axis, kind, order)<br ALIGN="LEFT"/>argsort(axis, kind, order)<br ALIGN="LEFT"/>astype(dtype, order, casting, subok, copy)<br ALIGN="LEFT"/>byteswap(inplace)<br ALIGN="LEFT"/>choose(choices, out, mode)<br ALIGN="LEFT"/>clip(min, max, out)<br ALIGN="LEFT"/>compress(condition, axis, out)<br ALIGN="LEFT"/>conj()<br ALIGN="LEFT"/>conjugate()<br ALIGN="LEFT"/>copy(order)<br ALIGN="LEFT"/>cumprod(axis, dtype, out)<br ALIGN="LEFT"/>cumsum(axis, dtype, out)<br ALIGN="LEFT"/>diagonal(offset, axis1, axis2)<br ALIGN="LEFT"/>dot(b, out)<br ALIGN="LEFT"/>dump(file)<br ALIGN="LEFT"/>dumps()<br ALIGN="LEFT"/>fill(value)<br ALIGN="LEFT"/>flatten(order)<br ALIGN="LEFT"/>getfield(dtype, offset)<br ALIGN="LEFT"/>item()<br ALIGN="LEFT"/>itemset()<br ALIGN="LEFT"/>max(axis, out)<br ALIGN="LEFT"/>mean(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>min(axis, out, keepdims)<br ALIGN="LEFT"/>newbyteorder(new_order)<br ALIGN="LEFT"/>nonzero()<br ALIGN="LEFT"/>partition(kth, axis, kind, order)<br ALIGN="LEFT"/>prod(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>ptp(axis, out)<br ALIGN="LEFT"/>put(indices, values, mode)<br ALIGN="LEFT"/>ravel(order)<br ALIGN="LEFT"/>repeat(repeats, axis)<br ALIGN="LEFT"/>reshape(shape, order)<br ALIGN="LEFT"/>resize(new_shape, refcheck)<br ALIGN="LEFT"/>round(decimals, out)<br ALIGN="LEFT"/>searchsorted(v, side, sorter)<br ALIGN="LEFT"/>setfield(val, dtype, offset)<br ALIGN="LEFT"/>setflags(write, align, uic)<br ALIGN="LEFT"/>sort(axis, kind, order)<br ALIGN="LEFT"/>squeeze(axis)<br ALIGN="LEFT"/>std(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>sum(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>swapaxes(axis1, axis2)<br ALIGN="LEFT"/>take(indices, axis, out, mode)<br ALIGN="LEFT"/>tobytes(order)<br ALIGN="LEFT"/>tofile(fid, sep, format)<br ALIGN="LEFT"/>tolist()<br ALIGN="LEFT"/>tostring(order)<br ALIGN="LEFT"/>trace(offset, axis1, axis2, dtype, out)<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>var(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>view(dtype, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".ndarray" [color="black", fontcolor="black", label=<{ndarray|T<br ALIGN="LEFT"/>base : NoneType<br ALIGN="LEFT"/>ctypes : NoneType<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>dtype : NoneType<br ALIGN="LEFT"/>flags : NoneType<br ALIGN="LEFT"/>flat<br ALIGN="LEFT"/>imag<br ALIGN="LEFT"/>itemsize : NoneType<br ALIGN="LEFT"/>nbytes : NoneType<br ALIGN="LEFT"/>ndim : NoneType<br ALIGN="LEFT"/>real<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>size : NoneType<br ALIGN="LEFT"/>strides : NoneType<br ALIGN="LEFT"/>|all(axis, out, keepdims)<br ALIGN="LEFT"/>any(axis, out, keepdims)<br ALIGN="LEFT"/>argmax(axis, out)<br ALIGN="LEFT"/>argmin(axis, out)<br ALIGN="LEFT"/>argpartition(kth, axis, kind, order)<br ALIGN="LEFT"/>argsort(axis, kind, order)<br ALIGN="LEFT"/>astype(dtype, order, casting, subok, copy)<br ALIGN="LEFT"/>byteswap(inplace)<br ALIGN="LEFT"/>choose(choices, out, mode)<br ALIGN="LEFT"/>clip(min, max, out)<br ALIGN="LEFT"/>compress(condition, axis, out)<br ALIGN="LEFT"/>conj()<br ALIGN="LEFT"/>conjugate()<br ALIGN="LEFT"/>copy(order)<br ALIGN="LEFT"/>cumprod(axis, dtype, out)<br ALIGN="LEFT"/>cumsum(axis, dtype, out)<br ALIGN="LEFT"/>diagonal(offset, axis1, axis2)<br ALIGN="LEFT"/>dot(b, out)<br ALIGN="LEFT"/>dump(file)<br ALIGN="LEFT"/>dumps()<br ALIGN="LEFT"/>fill(value)<br ALIGN="LEFT"/>flatten(order)<br ALIGN="LEFT"/>getfield(dtype, offset)<br ALIGN="LEFT"/>item()<br ALIGN="LEFT"/>itemset()<br ALIGN="LEFT"/>max(axis, out)<br ALIGN="LEFT"/>mean(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>min(axis, out, keepdims)<br ALIGN="LEFT"/>newbyteorder(new_order)<br ALIGN="LEFT"/>nonzero()<br ALIGN="LEFT"/>partition(kth, axis, kind, order)<br ALIGN="LEFT"/>prod(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>ptp(axis, out)<br ALIGN="LEFT"/>put(indices, values, mode)<br ALIGN="LEFT"/>ravel(order)<br ALIGN="LEFT"/>repeat(repeats, axis)<br ALIGN="LEFT"/>reshape(shape, order)<br ALIGN="LEFT"/>resize(new_shape, refcheck)<br ALIGN="LEFT"/>round(decimals, out)<br ALIGN="LEFT"/>searchsorted(v, side, sorter)<br ALIGN="LEFT"/>setfield(val, dtype, offset)<br ALIGN="LEFT"/>setflags(write, align, uic)<br ALIGN="LEFT"/>sort(axis, kind, order)<br ALIGN="LEFT"/>squeeze(axis)<br ALIGN="LEFT"/>std(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>sum(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>swapaxes(axis1, axis2)<br ALIGN="LEFT"/>take(indices, axis, out, mode)<br ALIGN="LEFT"/>tobytes(order)<br ALIGN="LEFT"/>tofile(fid, sep, format)<br ALIGN="LEFT"/>tolist()<br ALIGN="LEFT"/>tostring(order)<br ALIGN="LEFT"/>trace(offset, axis1, axis2, dtype, out)<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>var(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>view(dtype, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".ndarray" [color="black", fontcolor="black", label=<{ndarray|T : ndarray<br ALIGN="LEFT"/>base : NoneType<br ALIGN="LEFT"/>ctypes : NoneType<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>dtype : NoneType<br ALIGN="LEFT"/>flags : NoneType<br ALIGN="LEFT"/>flat : ndarray<br ALIGN="LEFT"/>imag : ndarray<br ALIGN="LEFT"/>itemsize : NoneType<br ALIGN="LEFT"/>nbytes : NoneType<br ALIGN="LEFT"/>ndim : NoneType<br ALIGN="LEFT"/>real : ndarray<br ALIGN="LEFT"/>shape : ndarray<br ALIGN="LEFT"/>size : NoneType<br ALIGN="LEFT"/>strides : NoneType<br ALIGN="LEFT"/>|all(axis, out, keepdims)<br ALIGN="LEFT"/>any(axis, out, keepdims)<br ALIGN="LEFT"/>argmax(axis, out)<br ALIGN="LEFT"/>argmin(axis, out)<br ALIGN="LEFT"/>argpartition(kth, axis, kind, order)<br ALIGN="LEFT"/>argsort(axis, kind, order)<br ALIGN="LEFT"/>astype(dtype, order, casting, subok, copy)<br ALIGN="LEFT"/>byteswap(inplace)<br ALIGN="LEFT"/>choose(choices, out, mode)<br ALIGN="LEFT"/>clip(min, max, out)<br ALIGN="LEFT"/>compress(condition, axis, out)<br ALIGN="LEFT"/>conj()<br ALIGN="LEFT"/>conjugate()<br ALIGN="LEFT"/>copy(order)<br ALIGN="LEFT"/>cumprod(axis, dtype, out)<br ALIGN="LEFT"/>cumsum(axis, dtype, out)<br ALIGN="LEFT"/>diagonal(offset, axis1, axis2)<br ALIGN="LEFT"/>dot(b, out)<br ALIGN="LEFT"/>dump(file)<br ALIGN="LEFT"/>dumps()<br ALIGN="LEFT"/>fill(value)<br ALIGN="LEFT"/>flatten(order)<br ALIGN="LEFT"/>getfield(dtype, offset)<br ALIGN="LEFT"/>item()<br ALIGN="LEFT"/>itemset()<br ALIGN="LEFT"/>max(axis, out)<br ALIGN="LEFT"/>mean(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>min(axis, out, keepdims)<br ALIGN="LEFT"/>newbyteorder(new_order)<br ALIGN="LEFT"/>nonzero()<br ALIGN="LEFT"/>partition(kth, axis, kind, order)<br ALIGN="LEFT"/>prod(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>ptp(axis, out)<br ALIGN="LEFT"/>put(indices, values, mode)<br ALIGN="LEFT"/>ravel(order)<br ALIGN="LEFT"/>repeat(repeats, axis)<br ALIGN="LEFT"/>reshape(shape, order)<br ALIGN="LEFT"/>resize(new_shape, refcheck)<br ALIGN="LEFT"/>round(decimals, out)<br ALIGN="LEFT"/>searchsorted(v, side, sorter)<br ALIGN="LEFT"/>setfield(val, dtype, offset)<br ALIGN="LEFT"/>setflags(write, align, uic)<br ALIGN="LEFT"/>sort(axis, kind, order)<br ALIGN="LEFT"/>squeeze(axis)<br ALIGN="LEFT"/>std(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>sum(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>swapaxes(axis1, axis2)<br ALIGN="LEFT"/>take(indices, axis, out, mode)<br ALIGN="LEFT"/>tobytes(order)<br ALIGN="LEFT"/>tofile(fid, sep, format)<br ALIGN="LEFT"/>tolist()<br ALIGN="LEFT"/>tostring(order)<br ALIGN="LEFT"/>trace(offset, axis1, axis2, dtype, out)<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>var(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>view(dtype, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".ndarray" [color="black", fontcolor="black", label=<{ndarray|T : ndarray<br ALIGN="LEFT"/>base : NoneType<br ALIGN="LEFT"/>ctypes : NoneType<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>dtype : NoneType<br ALIGN="LEFT"/>flags : NoneType<br ALIGN="LEFT"/>flat : ndarray<br ALIGN="LEFT"/>imag : ndarray<br ALIGN="LEFT"/>itemsize : NoneType<br ALIGN="LEFT"/>nbytes : NoneType<br ALIGN="LEFT"/>ndim : NoneType<br ALIGN="LEFT"/>real : ndarray<br ALIGN="LEFT"/>shape : ndarray<br ALIGN="LEFT"/>size : NoneType<br ALIGN="LEFT"/>strides : NoneType<br ALIGN="LEFT"/>|all(axis, out, keepdims)<br ALIGN="LEFT"/>any(axis, out, keepdims)<br ALIGN="LEFT"/>argmax(axis, out)<br ALIGN="LEFT"/>argmin(axis, out)<br ALIGN="LEFT"/>argpartition(kth, axis, kind, order)<br ALIGN="LEFT"/>argsort(axis, kind, order)<br ALIGN="LEFT"/>astype(dtype, order, casting, subok, copy)<br ALIGN="LEFT"/>byteswap(inplace)<br ALIGN="LEFT"/>choose(choices, out, mode)<br ALIGN="LEFT"/>clip(min, max, out)<br ALIGN="LEFT"/>compress(condition, axis, out)<br ALIGN="LEFT"/>conj()<br ALIGN="LEFT"/>conjugate()<br ALIGN="LEFT"/>copy(order)<br ALIGN="LEFT"/>cumprod(axis, dtype, out)<br ALIGN="LEFT"/>cumsum(axis, dtype, out)<br ALIGN="LEFT"/>diagonal(offset, axis1, axis2)<br ALIGN="LEFT"/>dot(b, out)<br ALIGN="LEFT"/>dump(file)<br ALIGN="LEFT"/>dumps()<br ALIGN="LEFT"/>fill(value)<br ALIGN="LEFT"/>flatten(order)<br ALIGN="LEFT"/>getfield(dtype, offset)<br ALIGN="LEFT"/>item()<br ALIGN="LEFT"/>itemset()<br ALIGN="LEFT"/>max(axis, out)<br ALIGN="LEFT"/>mean(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>min(axis, out, keepdims)<br ALIGN="LEFT"/>newbyteorder(new_order)<br ALIGN="LEFT"/>nonzero()<br ALIGN="LEFT"/>partition(kth, axis, kind, order)<br ALIGN="LEFT"/>prod(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>ptp(axis, out)<br ALIGN="LEFT"/>put(indices, values, mode)<br ALIGN="LEFT"/>ravel(order)<br ALIGN="LEFT"/>repeat(repeats, axis)<br ALIGN="LEFT"/>reshape(shape, order)<br ALIGN="LEFT"/>resize(new_shape, refcheck)<br ALIGN="LEFT"/>round(decimals, out)<br ALIGN="LEFT"/>searchsorted(v, side, sorter)<br ALIGN="LEFT"/>setfield(val, dtype, offset)<br ALIGN="LEFT"/>setflags(write, align, uic)<br ALIGN="LEFT"/>sort(axis, kind, order)<br ALIGN="LEFT"/>squeeze(axis)<br ALIGN="LEFT"/>std(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>sum(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>swapaxes(axis1, axis2)<br ALIGN="LEFT"/>take(indices, axis, out, mode)<br ALIGN="LEFT"/>tobytes(order)<br ALIGN="LEFT"/>tofile(fid, sep, format)<br ALIGN="LEFT"/>tolist()<br ALIGN="LEFT"/>tostring(order)<br ALIGN="LEFT"/>trace(offset, axis1, axis2, dtype, out)<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>var(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>view(dtype, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".ndarray" [color="black", fontcolor="black", label=<{ndarray|T : ndarray<br ALIGN="LEFT"/>base : NoneType<br ALIGN="LEFT"/>ctypes : NoneType<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>dtype : NoneType<br ALIGN="LEFT"/>flags : NoneType<br ALIGN="LEFT"/>flat : ndarray<br ALIGN="LEFT"/>imag : ndarray<br ALIGN="LEFT"/>itemsize : NoneType<br ALIGN="LEFT"/>nbytes : NoneType<br ALIGN="LEFT"/>ndim : NoneType<br ALIGN="LEFT"/>real : ndarray<br ALIGN="LEFT"/>shape : ndarray<br ALIGN="LEFT"/>size : NoneType<br ALIGN="LEFT"/>strides : NoneType<br ALIGN="LEFT"/>|all(axis, out, keepdims)<br ALIGN="LEFT"/>any(axis, out, keepdims)<br ALIGN="LEFT"/>argmax(axis, out)<br ALIGN="LEFT"/>argmin(axis, out)<br ALIGN="LEFT"/>argpartition(kth, axis, kind, order)<br ALIGN="LEFT"/>argsort(axis, kind, order)<br ALIGN="LEFT"/>astype(dtype, order, casting, subok, copy)<br ALIGN="LEFT"/>byteswap(inplace)<br ALIGN="LEFT"/>choose(choices, out, mode)<br ALIGN="LEFT"/>clip(min, max, out)<br ALIGN="LEFT"/>compress(condition, axis, out)<br ALIGN="LEFT"/>conj()<br ALIGN="LEFT"/>conjugate()<br ALIGN="LEFT"/>copy(order)<br ALIGN="LEFT"/>cumprod(axis, dtype, out)<br ALIGN="LEFT"/>cumsum(axis, dtype, out)<br ALIGN="LEFT"/>diagonal(offset, axis1, axis2)<br ALIGN="LEFT"/>dot(b, out)<br ALIGN="LEFT"/>dump(file)<br ALIGN="LEFT"/>dumps()<br ALIGN="LEFT"/>fill(value)<br ALIGN="LEFT"/>flatten(order)<br ALIGN="LEFT"/>getfield(dtype, offset)<br ALIGN="LEFT"/>item()<br ALIGN="LEFT"/>itemset()<br ALIGN="LEFT"/>max(axis, out)<br ALIGN="LEFT"/>mean(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>min(axis, out, keepdims)<br ALIGN="LEFT"/>newbyteorder(new_order)<br ALIGN="LEFT"/>nonzero()<br ALIGN="LEFT"/>partition(kth, axis, kind, order)<br ALIGN="LEFT"/>prod(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>ptp(axis, out)<br ALIGN="LEFT"/>put(indices, values, mode)<br ALIGN="LEFT"/>ravel(order)<br ALIGN="LEFT"/>repeat(repeats, axis)<br ALIGN="LEFT"/>reshape(shape, order)<br ALIGN="LEFT"/>resize(new_shape, refcheck)<br ALIGN="LEFT"/>round(decimals, out)<br ALIGN="LEFT"/>searchsorted(v, side, sorter)<br ALIGN="LEFT"/>setfield(val, dtype, offset)<br ALIGN="LEFT"/>setflags(write, align, uic)<br ALIGN="LEFT"/>sort(axis, kind, order)<br ALIGN="LEFT"/>squeeze(axis)<br ALIGN="LEFT"/>std(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>sum(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>swapaxes(axis1, axis2)<br ALIGN="LEFT"/>take(indices, axis, out, mode)<br ALIGN="LEFT"/>tobytes(order)<br ALIGN="LEFT"/>tofile(fid, sep, format)<br ALIGN="LEFT"/>tolist()<br ALIGN="LEFT"/>tostring(order)<br ALIGN="LEFT"/>trace(offset, axis1, axis2, dtype, out)<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>var(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>view(dtype, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".ndarray" [color="black", fontcolor="black", label=<{ndarray|T : ndarray<br ALIGN="LEFT"/>base : NoneType<br ALIGN="LEFT"/>ctypes : NoneType<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>dtype : NoneType<br ALIGN="LEFT"/>flags : NoneType<br ALIGN="LEFT"/>flat : ndarray<br ALIGN="LEFT"/>imag : ndarray<br ALIGN="LEFT"/>itemsize : NoneType<br ALIGN="LEFT"/>nbytes : NoneType<br ALIGN="LEFT"/>ndim : NoneType<br ALIGN="LEFT"/>real : ndarray<br ALIGN="LEFT"/>shape : ndarray<br ALIGN="LEFT"/>size : NoneType<br ALIGN="LEFT"/>strides : NoneType<br ALIGN="LEFT"/>|all(axis, out, keepdims)<br ALIGN="LEFT"/>any(axis, out, keepdims)<br ALIGN="LEFT"/>argmax(axis, out)<br ALIGN="LEFT"/>argmin(axis, out)<br ALIGN="LEFT"/>argpartition(kth, axis, kind, order)<br ALIGN="LEFT"/>argsort(axis, kind, order)<br ALIGN="LEFT"/>astype(dtype, order, casting, subok, copy)<br ALIGN="LEFT"/>byteswap(inplace)<br ALIGN="LEFT"/>choose(choices, out, mode)<br ALIGN="LEFT"/>clip(min, max, out)<br ALIGN="LEFT"/>compress(condition, axis, out)<br ALIGN="LEFT"/>conj()<br ALIGN="LEFT"/>conjugate()<br ALIGN="LEFT"/>copy(order)<br ALIGN="LEFT"/>cumprod(axis, dtype, out)<br ALIGN="LEFT"/>cumsum(axis, dtype, out)<br ALIGN="LEFT"/>diagonal(offset, axis1, axis2)<br ALIGN="LEFT"/>dot(b, out)<br ALIGN="LEFT"/>dump(file)<br ALIGN="LEFT"/>dumps()<br ALIGN="LEFT"/>fill(value)<br ALIGN="LEFT"/>flatten(order)<br ALIGN="LEFT"/>getfield(dtype, offset)<br ALIGN="LEFT"/>item()<br ALIGN="LEFT"/>itemset()<br ALIGN="LEFT"/>max(axis, out)<br ALIGN="LEFT"/>mean(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>min(axis, out, keepdims)<br ALIGN="LEFT"/>newbyteorder(new_order)<br ALIGN="LEFT"/>nonzero()<br ALIGN="LEFT"/>partition(kth, axis, kind, order)<br ALIGN="LEFT"/>prod(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>ptp(axis, out)<br ALIGN="LEFT"/>put(indices, values, mode)<br ALIGN="LEFT"/>ravel(order)<br ALIGN="LEFT"/>repeat(repeats, axis)<br ALIGN="LEFT"/>reshape(shape, order)<br ALIGN="LEFT"/>resize(new_shape, refcheck)<br ALIGN="LEFT"/>round(decimals, out)<br ALIGN="LEFT"/>searchsorted(v, side, sorter)<br ALIGN="LEFT"/>setfield(val, dtype, offset)<br ALIGN="LEFT"/>setflags(write, align, uic)<br ALIGN="LEFT"/>sort(axis, kind, order)<br ALIGN="LEFT"/>squeeze(axis)<br ALIGN="LEFT"/>std(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>sum(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>swapaxes(axis1, axis2)<br ALIGN="LEFT"/>take(indices, axis, out, mode)<br ALIGN="LEFT"/>tobytes(order)<br ALIGN="LEFT"/>tofile(fid, sep, format)<br ALIGN="LEFT"/>tolist()<br ALIGN="LEFT"/>tostring(order)<br ALIGN="LEFT"/>trace(offset, axis1, axis2, dtype, out)<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>var(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>view(dtype, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".ndarray" [color="black", fontcolor="black", label=<{ndarray|T : ndarray<br ALIGN="LEFT"/>base : NoneType<br ALIGN="LEFT"/>ctypes : NoneType<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>dtype : NoneType<br ALIGN="LEFT"/>flags : NoneType<br ALIGN="LEFT"/>flat : ndarray<br ALIGN="LEFT"/>imag : ndarray<br ALIGN="LEFT"/>itemsize : NoneType<br ALIGN="LEFT"/>nbytes : NoneType<br ALIGN="LEFT"/>ndim : NoneType<br ALIGN="LEFT"/>real : ndarray<br ALIGN="LEFT"/>shape : ndarray<br ALIGN="LEFT"/>size : NoneType<br ALIGN="LEFT"/>strides : NoneType<br ALIGN="LEFT"/>|all(axis, out, keepdims)<br ALIGN="LEFT"/>any(axis, out, keepdims)<br ALIGN="LEFT"/>argmax(axis, out)<br ALIGN="LEFT"/>argmin(axis, out)<br ALIGN="LEFT"/>argpartition(kth, axis, kind, order)<br ALIGN="LEFT"/>argsort(axis, kind, order)<br ALIGN="LEFT"/>astype(dtype, order, casting, subok, copy)<br ALIGN="LEFT"/>byteswap(inplace)<br ALIGN="LEFT"/>choose(choices, out, mode)<br ALIGN="LEFT"/>clip(min, max, out)<br ALIGN="LEFT"/>compress(condition, axis, out)<br ALIGN="LEFT"/>conj()<br ALIGN="LEFT"/>conjugate()<br ALIGN="LEFT"/>copy(order)<br ALIGN="LEFT"/>cumprod(axis, dtype, out)<br ALIGN="LEFT"/>cumsum(axis, dtype, out)<br ALIGN="LEFT"/>diagonal(offset, axis1, axis2)<br ALIGN="LEFT"/>dot(b, out)<br ALIGN="LEFT"/>dump(file)<br ALIGN="LEFT"/>dumps()<br ALIGN="LEFT"/>fill(value)<br ALIGN="LEFT"/>flatten(order)<br ALIGN="LEFT"/>getfield(dtype, offset)<br ALIGN="LEFT"/>item()<br ALIGN="LEFT"/>itemset()<br ALIGN="LEFT"/>max(axis, out)<br ALIGN="LEFT"/>mean(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>min(axis, out, keepdims)<br ALIGN="LEFT"/>newbyteorder(new_order)<br ALIGN="LEFT"/>nonzero()<br ALIGN="LEFT"/>partition(kth, axis, kind, order)<br ALIGN="LEFT"/>prod(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>ptp(axis, out)<br ALIGN="LEFT"/>put(indices, values, mode)<br ALIGN="LEFT"/>ravel(order)<br ALIGN="LEFT"/>repeat(repeats, axis)<br ALIGN="LEFT"/>reshape(shape, order)<br ALIGN="LEFT"/>resize(new_shape, refcheck)<br ALIGN="LEFT"/>round(decimals, out)<br ALIGN="LEFT"/>searchsorted(v, side, sorter)<br ALIGN="LEFT"/>setfield(val, dtype, offset)<br ALIGN="LEFT"/>setflags(write, align, uic)<br ALIGN="LEFT"/>sort(axis, kind, order)<br ALIGN="LEFT"/>squeeze(axis)<br ALIGN="LEFT"/>std(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>sum(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>swapaxes(axis1, axis2)<br ALIGN="LEFT"/>take(indices, axis, out, mode)<br ALIGN="LEFT"/>tobytes(order)<br ALIGN="LEFT"/>tofile(fid, sep, format)<br ALIGN="LEFT"/>tolist()<br ALIGN="LEFT"/>tostring(order)<br ALIGN="LEFT"/>trace(offset, axis1, axis2, dtype, out)<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>var(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>view(dtype, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".ndarray" [color="black", fontcolor="black", label=<{ndarray|T<br ALIGN="LEFT"/>base : NoneType<br ALIGN="LEFT"/>ctypes : NoneType<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>dtype : NoneType<br ALIGN="LEFT"/>flags : NoneType<br ALIGN="LEFT"/>flat<br ALIGN="LEFT"/>imag<br ALIGN="LEFT"/>itemsize : NoneType<br ALIGN="LEFT"/>nbytes : NoneType<br ALIGN="LEFT"/>ndim : NoneType<br ALIGN="LEFT"/>real<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>size : NoneType<br ALIGN="LEFT"/>strides : NoneType<br ALIGN="LEFT"/>|all(axis, out, keepdims)<br ALIGN="LEFT"/>any(axis, out, keepdims)<br ALIGN="LEFT"/>argmax(axis, out)<br ALIGN="LEFT"/>argmin(axis, out)<br ALIGN="LEFT"/>argpartition(kth, axis, kind, order)<br ALIGN="LEFT"/>argsort(axis, kind, order)<br ALIGN="LEFT"/>astype(dtype, order, casting, subok, copy)<br ALIGN="LEFT"/>byteswap(inplace)<br ALIGN="LEFT"/>choose(choices, out, mode)<br ALIGN="LEFT"/>clip(min, max, out)<br ALIGN="LEFT"/>compress(condition, axis, out)<br ALIGN="LEFT"/>conj()<br ALIGN="LEFT"/>conjugate()<br ALIGN="LEFT"/>copy(order)<br ALIGN="LEFT"/>cumprod(axis, dtype, out)<br ALIGN="LEFT"/>cumsum(axis, dtype, out)<br ALIGN="LEFT"/>diagonal(offset, axis1, axis2)<br ALIGN="LEFT"/>dot(b, out)<br ALIGN="LEFT"/>dump(file)<br ALIGN="LEFT"/>dumps()<br ALIGN="LEFT"/>fill(value)<br ALIGN="LEFT"/>flatten(order)<br ALIGN="LEFT"/>getfield(dtype, offset)<br ALIGN="LEFT"/>item()<br ALIGN="LEFT"/>itemset()<br ALIGN="LEFT"/>max(axis, out)<br ALIGN="LEFT"/>mean(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>min(axis, out, keepdims)<br ALIGN="LEFT"/>newbyteorder(new_order)<br ALIGN="LEFT"/>nonzero()<br ALIGN="LEFT"/>partition(kth, axis, kind, order)<br ALIGN="LEFT"/>prod(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>ptp(axis, out)<br ALIGN="LEFT"/>put(indices, values, mode)<br ALIGN="LEFT"/>ravel(order)<br ALIGN="LEFT"/>repeat(repeats, axis)<br ALIGN="LEFT"/>reshape(shape, order)<br ALIGN="LEFT"/>resize(new_shape, refcheck)<br ALIGN="LEFT"/>round(decimals, out)<br ALIGN="LEFT"/>searchsorted(v, side, sorter)<br ALIGN="LEFT"/>setfield(val, dtype, offset)<br ALIGN="LEFT"/>setflags(write, align, uic)<br ALIGN="LEFT"/>sort(axis, kind, order)<br ALIGN="LEFT"/>squeeze(axis)<br ALIGN="LEFT"/>std(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>sum(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>swapaxes(axis1, axis2)<br ALIGN="LEFT"/>take(indices, axis, out, mode)<br ALIGN="LEFT"/>tobytes(order)<br ALIGN="LEFT"/>tofile(fid, sep, format)<br ALIGN="LEFT"/>tolist()<br ALIGN="LEFT"/>tostring(order)<br ALIGN="LEFT"/>trace(offset, axis1, axis2, dtype, out)<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>var(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>view(dtype, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".ndarray" [color="black", fontcolor="black", label=<{ndarray|T : ndarray<br ALIGN="LEFT"/>base : NoneType<br ALIGN="LEFT"/>ctypes : NoneType<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>dtype : NoneType<br ALIGN="LEFT"/>flags : NoneType<br ALIGN="LEFT"/>flat : ndarray<br ALIGN="LEFT"/>imag : ndarray<br ALIGN="LEFT"/>itemsize : NoneType<br ALIGN="LEFT"/>nbytes : NoneType<br ALIGN="LEFT"/>ndim : NoneType<br ALIGN="LEFT"/>real : ndarray<br ALIGN="LEFT"/>shape : ndarray<br ALIGN="LEFT"/>size : NoneType<br ALIGN="LEFT"/>strides : NoneType<br ALIGN="LEFT"/>|all(axis, out, keepdims)<br ALIGN="LEFT"/>any(axis, out, keepdims)<br ALIGN="LEFT"/>argmax(axis, out)<br ALIGN="LEFT"/>argmin(axis, out)<br ALIGN="LEFT"/>argpartition(kth, axis, kind, order)<br ALIGN="LEFT"/>argsort(axis, kind, order)<br ALIGN="LEFT"/>astype(dtype, order, casting, subok, copy)<br ALIGN="LEFT"/>byteswap(inplace)<br ALIGN="LEFT"/>choose(choices, out, mode)<br ALIGN="LEFT"/>clip(min, max, out)<br ALIGN="LEFT"/>compress(condition, axis, out)<br ALIGN="LEFT"/>conj()<br ALIGN="LEFT"/>conjugate()<br ALIGN="LEFT"/>copy(order)<br ALIGN="LEFT"/>cumprod(axis, dtype, out)<br ALIGN="LEFT"/>cumsum(axis, dtype, out)<br ALIGN="LEFT"/>diagonal(offset, axis1, axis2)<br ALIGN="LEFT"/>dot(b, out)<br ALIGN="LEFT"/>dump(file)<br ALIGN="LEFT"/>dumps()<br ALIGN="LEFT"/>fill(value)<br ALIGN="LEFT"/>flatten(order)<br ALIGN="LEFT"/>getfield(dtype, offset)<br ALIGN="LEFT"/>item()<br ALIGN="LEFT"/>itemset()<br ALIGN="LEFT"/>max(axis, out)<br ALIGN="LEFT"/>mean(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>min(axis, out, keepdims)<br ALIGN="LEFT"/>newbyteorder(new_order)<br ALIGN="LEFT"/>nonzero()<br ALIGN="LEFT"/>partition(kth, axis, kind, order)<br ALIGN="LEFT"/>prod(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>ptp(axis, out)<br ALIGN="LEFT"/>put(indices, values, mode)<br ALIGN="LEFT"/>ravel(order)<br ALIGN="LEFT"/>repeat(repeats, axis)<br ALIGN="LEFT"/>reshape(shape, order)<br ALIGN="LEFT"/>resize(new_shape, refcheck)<br ALIGN="LEFT"/>round(decimals, out)<br ALIGN="LEFT"/>searchsorted(v, side, sorter)<br ALIGN="LEFT"/>setfield(val, dtype, offset)<br ALIGN="LEFT"/>setflags(write, align, uic)<br ALIGN="LEFT"/>sort(axis, kind, order)<br ALIGN="LEFT"/>squeeze(axis)<br ALIGN="LEFT"/>std(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>sum(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>swapaxes(axis1, axis2)<br ALIGN="LEFT"/>take(indices, axis, out, mode)<br ALIGN="LEFT"/>tobytes(order)<br ALIGN="LEFT"/>tofile(fid, sep, format)<br ALIGN="LEFT"/>tolist()<br ALIGN="LEFT"/>tostring(order)<br ALIGN="LEFT"/>trace(offset, axis1, axis2, dtype, out)<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>var(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>view(dtype, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".ndarray" [color="black", fontcolor="black", label=<{ndarray|T : ndarray<br ALIGN="LEFT"/>base : NoneType<br ALIGN="LEFT"/>ctypes : NoneType<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>dtype : NoneType<br ALIGN="LEFT"/>flags : NoneType<br ALIGN="LEFT"/>flat : ndarray<br ALIGN="LEFT"/>imag : ndarray<br ALIGN="LEFT"/>itemsize : NoneType<br ALIGN="LEFT"/>nbytes : NoneType<br ALIGN="LEFT"/>ndim : NoneType<br ALIGN="LEFT"/>real : ndarray<br ALIGN="LEFT"/>shape : ndarray<br ALIGN="LEFT"/>size : NoneType<br ALIGN="LEFT"/>strides : NoneType<br ALIGN="LEFT"/>|all(axis, out, keepdims)<br ALIGN="LEFT"/>any(axis, out, keepdims)<br ALIGN="LEFT"/>argmax(axis, out)<br ALIGN="LEFT"/>argmin(axis, out)<br ALIGN="LEFT"/>argpartition(kth, axis, kind, order)<br ALIGN="LEFT"/>argsort(axis, kind, order)<br ALIGN="LEFT"/>astype(dtype, order, casting, subok, copy)<br ALIGN="LEFT"/>byteswap(inplace)<br ALIGN="LEFT"/>choose(choices, out, mode)<br ALIGN="LEFT"/>clip(min, max, out)<br ALIGN="LEFT"/>compress(condition, axis, out)<br ALIGN="LEFT"/>conj()<br ALIGN="LEFT"/>conjugate()<br ALIGN="LEFT"/>copy(order)<br ALIGN="LEFT"/>cumprod(axis, dtype, out)<br ALIGN="LEFT"/>cumsum(axis, dtype, out)<br ALIGN="LEFT"/>diagonal(offset, axis1, axis2)<br ALIGN="LEFT"/>dot(b, out)<br ALIGN="LEFT"/>dump(file)<br ALIGN="LEFT"/>dumps()<br ALIGN="LEFT"/>fill(value)<br ALIGN="LEFT"/>flatten(order)<br ALIGN="LEFT"/>getfield(dtype, offset)<br ALIGN="LEFT"/>item()<br ALIGN="LEFT"/>itemset()<br ALIGN="LEFT"/>max(axis, out)<br ALIGN="LEFT"/>mean(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>min(axis, out, keepdims)<br ALIGN="LEFT"/>newbyteorder(new_order)<br ALIGN="LEFT"/>nonzero()<br ALIGN="LEFT"/>partition(kth, axis, kind, order)<br ALIGN="LEFT"/>prod(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>ptp(axis, out)<br ALIGN="LEFT"/>put(indices, values, mode)<br ALIGN="LEFT"/>ravel(order)<br ALIGN="LEFT"/>repeat(repeats, axis)<br ALIGN="LEFT"/>reshape(shape, order)<br ALIGN="LEFT"/>resize(new_shape, refcheck)<br ALIGN="LEFT"/>round(decimals, out)<br ALIGN="LEFT"/>searchsorted(v, side, sorter)<br ALIGN="LEFT"/>setfield(val, dtype, offset)<br ALIGN="LEFT"/>setflags(write, align, uic)<br ALIGN="LEFT"/>sort(axis, kind, order)<br ALIGN="LEFT"/>squeeze(axis)<br ALIGN="LEFT"/>std(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>sum(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>swapaxes(axis1, axis2)<br ALIGN="LEFT"/>take(indices, axis, out, mode)<br ALIGN="LEFT"/>tobytes(order)<br ALIGN="LEFT"/>tofile(fid, sep, format)<br ALIGN="LEFT"/>tolist()<br ALIGN="LEFT"/>tostring(order)<br ALIGN="LEFT"/>trace(offset, axis1, axis2, dtype, out)<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>var(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>view(dtype, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".ndarray" [color="black", fontcolor="black", label=<{ndarray|T : ndarray<br ALIGN="LEFT"/>base : NoneType<br ALIGN="LEFT"/>ctypes : NoneType<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>dtype : NoneType<br ALIGN="LEFT"/>flags : NoneType<br ALIGN="LEFT"/>flat : ndarray<br ALIGN="LEFT"/>imag : ndarray<br ALIGN="LEFT"/>itemsize : NoneType<br ALIGN="LEFT"/>nbytes : NoneType<br ALIGN="LEFT"/>ndim : NoneType<br ALIGN="LEFT"/>real : ndarray<br ALIGN="LEFT"/>shape : ndarray<br ALIGN="LEFT"/>size : NoneType<br ALIGN="LEFT"/>strides : NoneType<br ALIGN="LEFT"/>|all(axis, out, keepdims)<br ALIGN="LEFT"/>any(axis, out, keepdims)<br ALIGN="LEFT"/>argmax(axis, out)<br ALIGN="LEFT"/>argmin(axis, out)<br ALIGN="LEFT"/>argpartition(kth, axis, kind, order)<br ALIGN="LEFT"/>argsort(axis, kind, order)<br ALIGN="LEFT"/>astype(dtype, order, casting, subok, copy)<br ALIGN="LEFT"/>byteswap(inplace)<br ALIGN="LEFT"/>choose(choices, out, mode)<br ALIGN="LEFT"/>clip(min, max, out)<br ALIGN="LEFT"/>compress(condition, axis, out)<br ALIGN="LEFT"/>conj()<br ALIGN="LEFT"/>conjugate()<br ALIGN="LEFT"/>copy(order)<br ALIGN="LEFT"/>cumprod(axis, dtype, out)<br ALIGN="LEFT"/>cumsum(axis, dtype, out)<br ALIGN="LEFT"/>diagonal(offset, axis1, axis2)<br ALIGN="LEFT"/>dot(b, out)<br ALIGN="LEFT"/>dump(file)<br ALIGN="LEFT"/>dumps()<br ALIGN="LEFT"/>fill(value)<br ALIGN="LEFT"/>flatten(order)<br ALIGN="LEFT"/>getfield(dtype, offset)<br ALIGN="LEFT"/>item()<br ALIGN="LEFT"/>itemset()<br ALIGN="LEFT"/>max(axis, out)<br ALIGN="LEFT"/>mean(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>min(axis, out, keepdims)<br ALIGN="LEFT"/>newbyteorder(new_order)<br ALIGN="LEFT"/>nonzero()<br ALIGN="LEFT"/>partition(kth, axis, kind, order)<br ALIGN="LEFT"/>prod(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>ptp(axis, out)<br ALIGN="LEFT"/>put(indices, values, mode)<br ALIGN="LEFT"/>ravel(order)<br ALIGN="LEFT"/>repeat(repeats, axis)<br ALIGN="LEFT"/>reshape(shape, order)<br ALIGN="LEFT"/>resize(new_shape, refcheck)<br ALIGN="LEFT"/>round(decimals, out)<br ALIGN="LEFT"/>searchsorted(v, side, sorter)<br ALIGN="LEFT"/>setfield(val, dtype, offset)<br ALIGN="LEFT"/>setflags(write, align, uic)<br ALIGN="LEFT"/>sort(axis, kind, order)<br ALIGN="LEFT"/>squeeze(axis)<br ALIGN="LEFT"/>std(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>sum(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>swapaxes(axis1, axis2)<br ALIGN="LEFT"/>take(indices, axis, out, mode)<br ALIGN="LEFT"/>tobytes(order)<br ALIGN="LEFT"/>tofile(fid, sep, format)<br ALIGN="LEFT"/>tolist()<br ALIGN="LEFT"/>tostring(order)<br ALIGN="LEFT"/>trace(offset, axis1, axis2, dtype, out)<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>var(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>view(dtype, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".ndarray" [color="black", fontcolor="black", label=<{ndarray|T : ndarray<br ALIGN="LEFT"/>base : NoneType<br ALIGN="LEFT"/>ctypes : NoneType<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>dtype : NoneType<br ALIGN="LEFT"/>flags : NoneType<br ALIGN="LEFT"/>flat : ndarray<br ALIGN="LEFT"/>imag : ndarray<br ALIGN="LEFT"/>itemsize : NoneType<br ALIGN="LEFT"/>nbytes : NoneType<br ALIGN="LEFT"/>ndim : NoneType<br ALIGN="LEFT"/>real : ndarray<br ALIGN="LEFT"/>shape : ndarray<br ALIGN="LEFT"/>size : NoneType<br ALIGN="LEFT"/>strides : NoneType<br ALIGN="LEFT"/>|all(axis, out, keepdims)<br ALIGN="LEFT"/>any(axis, out, keepdims)<br ALIGN="LEFT"/>argmax(axis, out)<br ALIGN="LEFT"/>argmin(axis, out)<br ALIGN="LEFT"/>argpartition(kth, axis, kind, order)<br ALIGN="LEFT"/>argsort(axis, kind, order)<br ALIGN="LEFT"/>astype(dtype, order, casting, subok, copy)<br ALIGN="LEFT"/>byteswap(inplace)<br ALIGN="LEFT"/>choose(choices, out, mode)<br ALIGN="LEFT"/>clip(min, max, out)<br ALIGN="LEFT"/>compress(condition, axis, out)<br ALIGN="LEFT"/>conj()<br ALIGN="LEFT"/>conjugate()<br ALIGN="LEFT"/>copy(order)<br ALIGN="LEFT"/>cumprod(axis, dtype, out)<br ALIGN="LEFT"/>cumsum(axis, dtype, out)<br ALIGN="LEFT"/>diagonal(offset, axis1, axis2)<br ALIGN="LEFT"/>dot(b, out)<br ALIGN="LEFT"/>dump(file)<br ALIGN="LEFT"/>dumps()<br ALIGN="LEFT"/>fill(value)<br ALIGN="LEFT"/>flatten(order)<br ALIGN="LEFT"/>getfield(dtype, offset)<br ALIGN="LEFT"/>item()<br ALIGN="LEFT"/>itemset()<br ALIGN="LEFT"/>max(axis, out)<br ALIGN="LEFT"/>mean(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>min(axis, out, keepdims)<br ALIGN="LEFT"/>newbyteorder(new_order)<br ALIGN="LEFT"/>nonzero()<br ALIGN="LEFT"/>partition(kth, axis, kind, order)<br ALIGN="LEFT"/>prod(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>ptp(axis, out)<br ALIGN="LEFT"/>put(indices, values, mode)<br ALIGN="LEFT"/>ravel(order)<br ALIGN="LEFT"/>repeat(repeats, axis)<br ALIGN="LEFT"/>reshape(shape, order)<br ALIGN="LEFT"/>resize(new_shape, refcheck)<br ALIGN="LEFT"/>round(decimals, out)<br ALIGN="LEFT"/>searchsorted(v, side, sorter)<br ALIGN="LEFT"/>setfield(val, dtype, offset)<br ALIGN="LEFT"/>setflags(write, align, uic)<br ALIGN="LEFT"/>sort(axis, kind, order)<br ALIGN="LEFT"/>squeeze(axis)<br ALIGN="LEFT"/>std(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>sum(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>swapaxes(axis1, axis2)<br ALIGN="LEFT"/>take(indices, axis, out, mode)<br ALIGN="LEFT"/>tobytes(order)<br ALIGN="LEFT"/>tofile(fid, sep, format)<br ALIGN="LEFT"/>tolist()<br ALIGN="LEFT"/>tostring(order)<br ALIGN="LEFT"/>trace(offset, axis1, axis2, dtype, out)<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>var(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>view(dtype, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".ndarray" [color="black", fontcolor="black", label=<{ndarray|T : ndarray<br ALIGN="LEFT"/>base : NoneType<br ALIGN="LEFT"/>ctypes : NoneType<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>dtype : NoneType<br ALIGN="LEFT"/>flags : NoneType<br ALIGN="LEFT"/>flat : ndarray<br ALIGN="LEFT"/>imag : ndarray<br ALIGN="LEFT"/>itemsize : NoneType<br ALIGN="LEFT"/>nbytes : NoneType<br ALIGN="LEFT"/>ndim : NoneType<br ALIGN="LEFT"/>real : ndarray<br ALIGN="LEFT"/>shape : ndarray<br ALIGN="LEFT"/>size : NoneType<br ALIGN="LEFT"/>strides : NoneType<br ALIGN="LEFT"/>|all(axis, out, keepdims)<br ALIGN="LEFT"/>any(axis, out, keepdims)<br ALIGN="LEFT"/>argmax(axis, out)<br ALIGN="LEFT"/>argmin(axis, out)<br ALIGN="LEFT"/>argpartition(kth, axis, kind, order)<br ALIGN="LEFT"/>argsort(axis, kind, order)<br ALIGN="LEFT"/>astype(dtype, order, casting, subok, copy)<br ALIGN="LEFT"/>byteswap(inplace)<br ALIGN="LEFT"/>choose(choices, out, mode)<br ALIGN="LEFT"/>clip(min, max, out)<br ALIGN="LEFT"/>compress(condition, axis, out)<br ALIGN="LEFT"/>conj()<br ALIGN="LEFT"/>conjugate()<br ALIGN="LEFT"/>copy(order)<br ALIGN="LEFT"/>cumprod(axis, dtype, out)<br ALIGN="LEFT"/>cumsum(axis, dtype, out)<br ALIGN="LEFT"/>diagonal(offset, axis1, axis2)<br ALIGN="LEFT"/>dot(b, out)<br ALIGN="LEFT"/>dump(file)<br ALIGN="LEFT"/>dumps()<br ALIGN="LEFT"/>fill(value)<br ALIGN="LEFT"/>flatten(order)<br ALIGN="LEFT"/>getfield(dtype, offset)<br ALIGN="LEFT"/>item()<br ALIGN="LEFT"/>itemset()<br ALIGN="LEFT"/>max(axis, out)<br ALIGN="LEFT"/>mean(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>min(axis, out, keepdims)<br ALIGN="LEFT"/>newbyteorder(new_order)<br ALIGN="LEFT"/>nonzero()<br ALIGN="LEFT"/>partition(kth, axis, kind, order)<br ALIGN="LEFT"/>prod(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>ptp(axis, out)<br ALIGN="LEFT"/>put(indices, values, mode)<br ALIGN="LEFT"/>ravel(order)<br ALIGN="LEFT"/>repeat(repeats, axis)<br ALIGN="LEFT"/>reshape(shape, order)<br ALIGN="LEFT"/>resize(new_shape, refcheck)<br ALIGN="LEFT"/>round(decimals, out)<br ALIGN="LEFT"/>searchsorted(v, side, sorter)<br ALIGN="LEFT"/>setfield(val, dtype, offset)<br ALIGN="LEFT"/>setflags(write, align, uic)<br ALIGN="LEFT"/>sort(axis, kind, order)<br ALIGN="LEFT"/>squeeze(axis)<br ALIGN="LEFT"/>std(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>sum(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>swapaxes(axis1, axis2)<br ALIGN="LEFT"/>take(indices, axis, out, mode)<br ALIGN="LEFT"/>tobytes(order)<br ALIGN="LEFT"/>tofile(fid, sep, format)<br ALIGN="LEFT"/>tolist()<br ALIGN="LEFT"/>tostring(order)<br ALIGN="LEFT"/>trace(offset, axis1, axis2, dtype, out)<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>var(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>view(dtype, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".ndarray" [color="black", fontcolor="black", label=<{ndarray|T<br ALIGN="LEFT"/>base : NoneType<br ALIGN="LEFT"/>ctypes : NoneType<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>dtype : NoneType<br ALIGN="LEFT"/>flags : NoneType<br ALIGN="LEFT"/>flat<br ALIGN="LEFT"/>imag<br ALIGN="LEFT"/>itemsize : NoneType<br ALIGN="LEFT"/>nbytes : NoneType<br ALIGN="LEFT"/>ndim : NoneType<br ALIGN="LEFT"/>real<br ALIGN="LEFT"/>shape<br ALIGN="LEFT"/>size : NoneType<br ALIGN="LEFT"/>strides : NoneType<br ALIGN="LEFT"/>|all(axis, out, keepdims)<br ALIGN="LEFT"/>any(axis, out, keepdims)<br ALIGN="LEFT"/>argmax(axis, out)<br ALIGN="LEFT"/>argmin(axis, out)<br ALIGN="LEFT"/>argpartition(kth, axis, kind, order)<br ALIGN="LEFT"/>argsort(axis, kind, order)<br ALIGN="LEFT"/>astype(dtype, order, casting, subok, copy)<br ALIGN="LEFT"/>byteswap(inplace)<br ALIGN="LEFT"/>choose(choices, out, mode)<br ALIGN="LEFT"/>clip(min, max, out)<br ALIGN="LEFT"/>compress(condition, axis, out)<br ALIGN="LEFT"/>conj()<br ALIGN="LEFT"/>conjugate()<br ALIGN="LEFT"/>copy(order)<br ALIGN="LEFT"/>cumprod(axis, dtype, out)<br ALIGN="LEFT"/>cumsum(axis, dtype, out)<br ALIGN="LEFT"/>diagonal(offset, axis1, axis2)<br ALIGN="LEFT"/>dot(b, out)<br ALIGN="LEFT"/>dump(file)<br ALIGN="LEFT"/>dumps()<br ALIGN="LEFT"/>fill(value)<br ALIGN="LEFT"/>flatten(order)<br ALIGN="LEFT"/>getfield(dtype, offset)<br ALIGN="LEFT"/>item()<br ALIGN="LEFT"/>itemset()<br ALIGN="LEFT"/>max(axis, out)<br ALIGN="LEFT"/>mean(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>min(axis, out, keepdims)<br ALIGN="LEFT"/>newbyteorder(new_order)<br ALIGN="LEFT"/>nonzero()<br ALIGN="LEFT"/>partition(kth, axis, kind, order)<br ALIGN="LEFT"/>prod(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>ptp(axis, out)<br ALIGN="LEFT"/>put(indices, values, mode)<br ALIGN="LEFT"/>ravel(order)<br ALIGN="LEFT"/>repeat(repeats, axis)<br ALIGN="LEFT"/>reshape(shape, order)<br ALIGN="LEFT"/>resize(new_shape, refcheck)<br ALIGN="LEFT"/>round(decimals, out)<br ALIGN="LEFT"/>searchsorted(v, side, sorter)<br ALIGN="LEFT"/>setfield(val, dtype, offset)<br ALIGN="LEFT"/>setflags(write, align, uic)<br ALIGN="LEFT"/>sort(axis, kind, order)<br ALIGN="LEFT"/>squeeze(axis)<br ALIGN="LEFT"/>std(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>sum(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>swapaxes(axis1, axis2)<br ALIGN="LEFT"/>take(indices, axis, out, mode)<br ALIGN="LEFT"/>tobytes(order)<br ALIGN="LEFT"/>tofile(fid, sep, format)<br ALIGN="LEFT"/>tolist()<br ALIGN="LEFT"/>tostring(order)<br ALIGN="LEFT"/>trace(offset, axis1, axis2, dtype, out)<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>var(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>view(dtype, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".ndarray" [color="black", fontcolor="black", label=<{ndarray|T : ndarray<br ALIGN="LEFT"/>base : NoneType<br ALIGN="LEFT"/>ctypes : NoneType<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>dtype : NoneType<br ALIGN="LEFT"/>flags : NoneType<br ALIGN="LEFT"/>flat : ndarray<br ALIGN="LEFT"/>imag : ndarray<br ALIGN="LEFT"/>itemsize : NoneType<br ALIGN="LEFT"/>nbytes : NoneType<br ALIGN="LEFT"/>ndim : NoneType<br ALIGN="LEFT"/>real : ndarray<br ALIGN="LEFT"/>shape : ndarray<br ALIGN="LEFT"/>size : NoneType<br ALIGN="LEFT"/>strides : NoneType<br ALIGN="LEFT"/>|all(axis, out, keepdims)<br ALIGN="LEFT"/>any(axis, out, keepdims)<br ALIGN="LEFT"/>argmax(axis, out)<br ALIGN="LEFT"/>argmin(axis, out)<br ALIGN="LEFT"/>argpartition(kth, axis, kind, order)<br ALIGN="LEFT"/>argsort(axis, kind, order)<br ALIGN="LEFT"/>astype(dtype, order, casting, subok, copy)<br ALIGN="LEFT"/>byteswap(inplace)<br ALIGN="LEFT"/>choose(choices, out, mode)<br ALIGN="LEFT"/>clip(min, max, out)<br ALIGN="LEFT"/>compress(condition, axis, out)<br ALIGN="LEFT"/>conj()<br ALIGN="LEFT"/>conjugate()<br ALIGN="LEFT"/>copy(order)<br ALIGN="LEFT"/>cumprod(axis, dtype, out)<br ALIGN="LEFT"/>cumsum(axis, dtype, out)<br ALIGN="LEFT"/>diagonal(offset, axis1, axis2)<br ALIGN="LEFT"/>dot(b, out)<br ALIGN="LEFT"/>dump(file)<br ALIGN="LEFT"/>dumps()<br ALIGN="LEFT"/>fill(value)<br ALIGN="LEFT"/>flatten(order)<br ALIGN="LEFT"/>getfield(dtype, offset)<br ALIGN="LEFT"/>item()<br ALIGN="LEFT"/>itemset()<br ALIGN="LEFT"/>max(axis, out)<br ALIGN="LEFT"/>mean(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>min(axis, out, keepdims)<br ALIGN="LEFT"/>newbyteorder(new_order)<br ALIGN="LEFT"/>nonzero()<br ALIGN="LEFT"/>partition(kth, axis, kind, order)<br ALIGN="LEFT"/>prod(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>ptp(axis, out)<br ALIGN="LEFT"/>put(indices, values, mode)<br ALIGN="LEFT"/>ravel(order)<br ALIGN="LEFT"/>repeat(repeats, axis)<br ALIGN="LEFT"/>reshape(shape, order)<br ALIGN="LEFT"/>resize(new_shape, refcheck)<br ALIGN="LEFT"/>round(decimals, out)<br ALIGN="LEFT"/>searchsorted(v, side, sorter)<br ALIGN="LEFT"/>setfield(val, dtype, offset)<br ALIGN="LEFT"/>setflags(write, align, uic)<br ALIGN="LEFT"/>sort(axis, kind, order)<br ALIGN="LEFT"/>squeeze(axis)<br ALIGN="LEFT"/>std(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>sum(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>swapaxes(axis1, axis2)<br ALIGN="LEFT"/>take(indices, axis, out, mode)<br ALIGN="LEFT"/>tobytes(order)<br ALIGN="LEFT"/>tofile(fid, sep, format)<br ALIGN="LEFT"/>tolist()<br ALIGN="LEFT"/>tostring(order)<br ALIGN="LEFT"/>trace(offset, axis1, axis2, dtype, out)<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>var(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>view(dtype, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".ndarray" [color="black", fontcolor="black", label=<{ndarray|T : ndarray<br ALIGN="LEFT"/>base : NoneType<br ALIGN="LEFT"/>ctypes : NoneType<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>dtype : NoneType<br ALIGN="LEFT"/>flags : NoneType<br ALIGN="LEFT"/>flat : ndarray<br ALIGN="LEFT"/>imag : ndarray<br ALIGN="LEFT"/>itemsize : NoneType<br ALIGN="LEFT"/>nbytes : NoneType<br ALIGN="LEFT"/>ndim : NoneType<br ALIGN="LEFT"/>real : ndarray<br ALIGN="LEFT"/>shape : ndarray<br ALIGN="LEFT"/>size : NoneType<br ALIGN="LEFT"/>strides : NoneType<br ALIGN="LEFT"/>|all(axis, out, keepdims)<br ALIGN="LEFT"/>any(axis, out, keepdims)<br ALIGN="LEFT"/>argmax(axis, out)<br ALIGN="LEFT"/>argmin(axis, out)<br ALIGN="LEFT"/>argpartition(kth, axis, kind, order)<br ALIGN="LEFT"/>argsort(axis, kind, order)<br ALIGN="LEFT"/>astype(dtype, order, casting, subok, copy)<br ALIGN="LEFT"/>byteswap(inplace)<br ALIGN="LEFT"/>choose(choices, out, mode)<br ALIGN="LEFT"/>clip(min, max, out)<br ALIGN="LEFT"/>compress(condition, axis, out)<br ALIGN="LEFT"/>conj()<br ALIGN="LEFT"/>conjugate()<br ALIGN="LEFT"/>copy(order)<br ALIGN="LEFT"/>cumprod(axis, dtype, out)<br ALIGN="LEFT"/>cumsum(axis, dtype, out)<br ALIGN="LEFT"/>diagonal(offset, axis1, axis2)<br ALIGN="LEFT"/>dot(b, out)<br ALIGN="LEFT"/>dump(file)<br ALIGN="LEFT"/>dumps()<br ALIGN="LEFT"/>fill(value)<br ALIGN="LEFT"/>flatten(order)<br ALIGN="LEFT"/>getfield(dtype, offset)<br ALIGN="LEFT"/>item()<br ALIGN="LEFT"/>itemset()<br ALIGN="LEFT"/>max(axis, out)<br ALIGN="LEFT"/>mean(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>min(axis, out, keepdims)<br ALIGN="LEFT"/>newbyteorder(new_order)<br ALIGN="LEFT"/>nonzero()<br ALIGN="LEFT"/>partition(kth, axis, kind, order)<br ALIGN="LEFT"/>prod(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>ptp(axis, out)<br ALIGN="LEFT"/>put(indices, values, mode)<br ALIGN="LEFT"/>ravel(order)<br ALIGN="LEFT"/>repeat(repeats, axis)<br ALIGN="LEFT"/>reshape(shape, order)<br ALIGN="LEFT"/>resize(new_shape, refcheck)<br ALIGN="LEFT"/>round(decimals, out)<br ALIGN="LEFT"/>searchsorted(v, side, sorter)<br ALIGN="LEFT"/>setfield(val, dtype, offset)<br ALIGN="LEFT"/>setflags(write, align, uic)<br ALIGN="LEFT"/>sort(axis, kind, order)<br ALIGN="LEFT"/>squeeze(axis)<br ALIGN="LEFT"/>std(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>sum(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>swapaxes(axis1, axis2)<br ALIGN="LEFT"/>take(indices, axis, out, mode)<br ALIGN="LEFT"/>tobytes(order)<br ALIGN="LEFT"/>tofile(fid, sep, format)<br ALIGN="LEFT"/>tolist()<br ALIGN="LEFT"/>tostring(order)<br ALIGN="LEFT"/>trace(offset, axis1, axis2, dtype, out)<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>var(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>view(dtype, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".ndarray" [color="black", fontcolor="black", label=<{ndarray|T : ndarray<br ALIGN="LEFT"/>base : NoneType<br ALIGN="LEFT"/>ctypes : NoneType<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>dtype : NoneType<br ALIGN="LEFT"/>flags : NoneType<br ALIGN="LEFT"/>flat : ndarray<br ALIGN="LEFT"/>imag : ndarray<br ALIGN="LEFT"/>itemsize : NoneType<br ALIGN="LEFT"/>nbytes : NoneType<br ALIGN="LEFT"/>ndim : NoneType<br ALIGN="LEFT"/>real : ndarray<br ALIGN="LEFT"/>shape : ndarray<br ALIGN="LEFT"/>size : NoneType<br ALIGN="LEFT"/>strides : NoneType<br ALIGN="LEFT"/>|all(axis, out, keepdims)<br ALIGN="LEFT"/>any(axis, out, keepdims)<br ALIGN="LEFT"/>argmax(axis, out)<br ALIGN="LEFT"/>argmin(axis, out)<br ALIGN="LEFT"/>argpartition(kth, axis, kind, order)<br ALIGN="LEFT"/>argsort(axis, kind, order)<br ALIGN="LEFT"/>astype(dtype, order, casting, subok, copy)<br ALIGN="LEFT"/>byteswap(inplace)<br ALIGN="LEFT"/>choose(choices, out, mode)<br ALIGN="LEFT"/>clip(min, max, out)<br ALIGN="LEFT"/>compress(condition, axis, out)<br ALIGN="LEFT"/>conj()<br ALIGN="LEFT"/>conjugate()<br ALIGN="LEFT"/>copy(order)<br ALIGN="LEFT"/>cumprod(axis, dtype, out)<br ALIGN="LEFT"/>cumsum(axis, dtype, out)<br ALIGN="LEFT"/>diagonal(offset, axis1, axis2)<br ALIGN="LEFT"/>dot(b, out)<br ALIGN="LEFT"/>dump(file)<br ALIGN="LEFT"/>dumps()<br ALIGN="LEFT"/>fill(value)<br ALIGN="LEFT"/>flatten(order)<br ALIGN="LEFT"/>getfield(dtype, offset)<br ALIGN="LEFT"/>item()<br ALIGN="LEFT"/>itemset()<br ALIGN="LEFT"/>max(axis, out)<br ALIGN="LEFT"/>mean(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>min(axis, out, keepdims)<br ALIGN="LEFT"/>newbyteorder(new_order)<br ALIGN="LEFT"/>nonzero()<br ALIGN="LEFT"/>partition(kth, axis, kind, order)<br ALIGN="LEFT"/>prod(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>ptp(axis, out)<br ALIGN="LEFT"/>put(indices, values, mode)<br ALIGN="LEFT"/>ravel(order)<br ALIGN="LEFT"/>repeat(repeats, axis)<br ALIGN="LEFT"/>reshape(shape, order)<br ALIGN="LEFT"/>resize(new_shape, refcheck)<br ALIGN="LEFT"/>round(decimals, out)<br ALIGN="LEFT"/>searchsorted(v, side, sorter)<br ALIGN="LEFT"/>setfield(val, dtype, offset)<br ALIGN="LEFT"/>setflags(write, align, uic)<br ALIGN="LEFT"/>sort(axis, kind, order)<br ALIGN="LEFT"/>squeeze(axis)<br ALIGN="LEFT"/>std(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>sum(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>swapaxes(axis1, axis2)<br ALIGN="LEFT"/>take(indices, axis, out, mode)<br ALIGN="LEFT"/>tobytes(order)<br ALIGN="LEFT"/>tofile(fid, sep, format)<br ALIGN="LEFT"/>tolist()<br ALIGN="LEFT"/>tostring(order)<br ALIGN="LEFT"/>trace(offset, axis1, axis2, dtype, out)<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>var(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>view(dtype, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".ndarray" [color="black", fontcolor="black", label=<{ndarray|T : ndarray<br ALIGN="LEFT"/>base : NoneType<br ALIGN="LEFT"/>ctypes : NoneType<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>dtype : NoneType<br ALIGN="LEFT"/>flags : NoneType<br ALIGN="LEFT"/>flat : ndarray<br ALIGN="LEFT"/>imag : ndarray<br ALIGN="LEFT"/>itemsize : NoneType<br ALIGN="LEFT"/>nbytes : NoneType<br ALIGN="LEFT"/>ndim : NoneType<br ALIGN="LEFT"/>real : ndarray<br ALIGN="LEFT"/>shape : ndarray<br ALIGN="LEFT"/>size : NoneType<br ALIGN="LEFT"/>strides : NoneType<br ALIGN="LEFT"/>|all(axis, out, keepdims)<br ALIGN="LEFT"/>any(axis, out, keepdims)<br ALIGN="LEFT"/>argmax(axis, out)<br ALIGN="LEFT"/>argmin(axis, out)<br ALIGN="LEFT"/>argpartition(kth, axis, kind, order)<br ALIGN="LEFT"/>argsort(axis, kind, order)<br ALIGN="LEFT"/>astype(dtype, order, casting, subok, copy)<br ALIGN="LEFT"/>byteswap(inplace)<br ALIGN="LEFT"/>choose(choices, out, mode)<br ALIGN="LEFT"/>clip(min, max, out)<br ALIGN="LEFT"/>compress(condition, axis, out)<br ALIGN="LEFT"/>conj()<br ALIGN="LEFT"/>conjugate()<br ALIGN="LEFT"/>copy(order)<br ALIGN="LEFT"/>cumprod(axis, dtype, out)<br ALIGN="LEFT"/>cumsum(axis, dtype, out)<br ALIGN="LEFT"/>diagonal(offset, axis1, axis2)<br ALIGN="LEFT"/>dot(b, out)<br ALIGN="LEFT"/>dump(file)<br ALIGN="LEFT"/>dumps()<br ALIGN="LEFT"/>fill(value)<br ALIGN="LEFT"/>flatten(order)<br ALIGN="LEFT"/>getfield(dtype, offset)<br ALIGN="LEFT"/>item()<br ALIGN="LEFT"/>itemset()<br ALIGN="LEFT"/>max(axis, out)<br ALIGN="LEFT"/>mean(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>min(axis, out, keepdims)<br ALIGN="LEFT"/>newbyteorder(new_order)<br ALIGN="LEFT"/>nonzero()<br ALIGN="LEFT"/>partition(kth, axis, kind, order)<br ALIGN="LEFT"/>prod(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>ptp(axis, out)<br ALIGN="LEFT"/>put(indices, values, mode)<br ALIGN="LEFT"/>ravel(order)<br ALIGN="LEFT"/>repeat(repeats, axis)<br ALIGN="LEFT"/>reshape(shape, order)<br ALIGN="LEFT"/>resize(new_shape, refcheck)<br ALIGN="LEFT"/>round(decimals, out)<br ALIGN="LEFT"/>searchsorted(v, side, sorter)<br ALIGN="LEFT"/>setfield(val, dtype, offset)<br ALIGN="LEFT"/>setflags(write, align, uic)<br ALIGN="LEFT"/>sort(axis, kind, order)<br ALIGN="LEFT"/>squeeze(axis)<br ALIGN="LEFT"/>std(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>sum(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>swapaxes(axis1, axis2)<br ALIGN="LEFT"/>take(indices, axis, out, mode)<br ALIGN="LEFT"/>tobytes(order)<br ALIGN="LEFT"/>tofile(fid, sep, format)<br ALIGN="LEFT"/>tolist()<br ALIGN="LEFT"/>tostring(order)<br ALIGN="LEFT"/>trace(offset, axis1, axis2, dtype, out)<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>var(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>view(dtype, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
".ndarray" [color="black", fontcolor="black", label=<{ndarray|T : ndarray<br ALIGN="LEFT"/>base : NoneType<br ALIGN="LEFT"/>ctypes : NoneType<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>dtype : NoneType<br ALIGN="LEFT"/>flags : NoneType<br ALIGN="LEFT"/>flat : ndarray<br ALIGN="LEFT"/>imag : ndarray<br ALIGN="LEFT"/>itemsize : NoneType<br ALIGN="LEFT"/>nbytes : NoneType<br ALIGN="LEFT"/>ndim : NoneType<br ALIGN="LEFT"/>real : ndarray<br ALIGN="LEFT"/>shape : ndarray<br ALIGN="LEFT"/>size : NoneType<br ALIGN="LEFT"/>strides : NoneType<br ALIGN="LEFT"/>|all(axis, out, keepdims)<br ALIGN="LEFT"/>any(axis, out, keepdims)<br ALIGN="LEFT"/>argmax(axis, out)<br ALIGN="LEFT"/>argmin(axis, out)<br ALIGN="LEFT"/>argpartition(kth, axis, kind, order)<br ALIGN="LEFT"/>argsort(axis, kind, order)<br ALIGN="LEFT"/>astype(dtype, order, casting, subok, copy)<br ALIGN="LEFT"/>byteswap(inplace)<br ALIGN="LEFT"/>choose(choices, out, mode)<br ALIGN="LEFT"/>clip(min, max, out)<br ALIGN="LEFT"/>compress(condition, axis, out)<br ALIGN="LEFT"/>conj()<br ALIGN="LEFT"/>conjugate()<br ALIGN="LEFT"/>copy(order)<br ALIGN="LEFT"/>cumprod(axis, dtype, out)<br ALIGN="LEFT"/>cumsum(axis, dtype, out)<br ALIGN="LEFT"/>diagonal(offset, axis1, axis2)<br ALIGN="LEFT"/>dot(b, out)<br ALIGN="LEFT"/>dump(file)<br ALIGN="LEFT"/>dumps()<br ALIGN="LEFT"/>fill(value)<br ALIGN="LEFT"/>flatten(order)<br ALIGN="LEFT"/>getfield(dtype, offset)<br ALIGN="LEFT"/>item()<br ALIGN="LEFT"/>itemset()<br ALIGN="LEFT"/>max(axis, out)<br ALIGN="LEFT"/>mean(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>min(axis, out, keepdims)<br ALIGN="LEFT"/>newbyteorder(new_order)<br ALIGN="LEFT"/>nonzero()<br ALIGN="LEFT"/>partition(kth, axis, kind, order)<br ALIGN="LEFT"/>prod(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>ptp(axis, out)<br ALIGN="LEFT"/>put(indices, values, mode)<br ALIGN="LEFT"/>ravel(order)<br ALIGN="LEFT"/>repeat(repeats, axis)<br ALIGN="LEFT"/>reshape(shape, order)<br ALIGN="LEFT"/>resize(new_shape, refcheck)<br ALIGN="LEFT"/>round(decimals, out)<br ALIGN="LEFT"/>searchsorted(v, side, sorter)<br ALIGN="LEFT"/>setfield(val, dtype, offset)<br ALIGN="LEFT"/>setflags(write, align, uic)<br ALIGN="LEFT"/>sort(axis, kind, order)<br ALIGN="LEFT"/>squeeze(axis)<br ALIGN="LEFT"/>std(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>sum(axis, dtype, out, keepdims)<br ALIGN="LEFT"/>swapaxes(axis1, axis2)<br ALIGN="LEFT"/>take(indices, axis, out, mode)<br ALIGN="LEFT"/>tobytes(order)<br ALIGN="LEFT"/>tofile(fid, sep, format)<br ALIGN="LEFT"/>tolist()<br ALIGN="LEFT"/>tostring(order)<br ALIGN="LEFT"/>trace(offset, axis1, axis2, dtype, out)<br ALIGN="LEFT"/>transpose()<br ALIGN="LEFT"/>var(axis, dtype, out, ddof, keepdims)<br ALIGN="LEFT"/>view(dtype, type)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DemoCarBFMC.perception.processCameraDetection.processCameraDetection" [color="black", fontcolor="black", label=<{processCameraDetection|debugging : bool<br ALIGN="LEFT"/>events : dict<br ALIGN="LEFT"/>logger<br ALIGN="LEFT"/>queuesList<br ALIGN="LEFT"/>sharedMemoryImage : SharedMemory<br ALIGN="LEFT"/>sharedMemoryImageName : str<br ALIGN="LEFT"/>|generateRandomWord(length)<br ALIGN="LEFT"/>getRois(message)<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"numpy.core.numerictypes.signedinteger" [color="black", fontcolor="black", label=<{signedinteger|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"DemoCarBFMC.perception.threads.threadDisplay.threadDisplay" [color="black", fontcolor="black", label=<{threadDisplay|debugger<br ALIGN="LEFT"/>displayTimerIntersection : int<br ALIGN="LEFT"/>displayTimerSign : int<br ALIGN="LEFT"/>errorBottom : NoneType<br ALIGN="LEFT"/>errorTop : NoneType<br ALIGN="LEFT"/>event<br ALIGN="LEFT"/>font<br ALIGN="LEFT"/>intersectionData : NoneType<br ALIGN="LEFT"/>laneDisplayWindows : NoneType<br ALIGN="LEFT"/>laneLeft : NoneType<br ALIGN="LEFT"/>laneMiddle : NoneType<br ALIGN="LEFT"/>laneReadData : NoneType, bool<br ALIGN="LEFT"/>laneRight : NoneType<br ALIGN="LEFT"/>logger<br ALIGN="LEFT"/>pipeRecvDisplayWindow : PipeConnection<br ALIGN="LEFT"/>pipeRecvIntersectionData : PipeConnection<br ALIGN="LEFT"/>pipeRecvLaneDetected : PipeConnection<br ALIGN="LEFT"/>pipeRecvLaneErrorBottom : PipeConnection<br ALIGN="LEFT"/>pipeRecvLaneErrorTop : PipeConnection<br ALIGN="LEFT"/>pipeRecvLeftLine : PipeConnection<br ALIGN="LEFT"/>pipeRecvMiddleLine : PipeConnection<br ALIGN="LEFT"/>pipeRecvRightLine : PipeConnection<br ALIGN="LEFT"/>pipeRecvSignDetected : PipeConnection<br ALIGN="LEFT"/>pipeRecvSignImage : PipeConnection<br ALIGN="LEFT"/>pipeRecvSignType : PipeConnection<br ALIGN="LEFT"/>queuesList<br ALIGN="LEFT"/>rois<br ALIGN="LEFT"/>sharedMemoryImage : SharedMemory<br ALIGN="LEFT"/>signCoords : NoneType<br ALIGN="LEFT"/>signDetected : NoneType, bool<br ALIGN="LEFT"/>signImage : NoneType<br ALIGN="LEFT"/>signType : NoneType<br ALIGN="LEFT"/>|drawInformation(image)<br ALIGN="LEFT"/>initSubscribeMessages()<br ALIGN="LEFT"/>readInformation()<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DemoCarBFMC.perception.threads.threadIntersectionDetection.threadIntersectionDetection" [color="black", fontcolor="black", label=<{threadIntersectionDetection|debugger<br ALIGN="LEFT"/>event<br ALIGN="LEFT"/>intersectionDetection<br ALIGN="LEFT"/>logger<br ALIGN="LEFT"/>pipeRecvSign : PipeConnection<br ALIGN="LEFT"/>queuesList<br ALIGN="LEFT"/>regionOfInterest<br ALIGN="LEFT"/>sharedMemoryImage : SharedMemory<br ALIGN="LEFT"/>|getRoiImage(image)<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DemoCarBFMC.perception.threads.threadLaneDetection.threadLaneDetection" [color="black", fontcolor="black", label=<{threadLaneDetection|counter : int<br ALIGN="LEFT"/>debugger<br ALIGN="LEFT"/>distanceError<br ALIGN="LEFT"/>event<br ALIGN="LEFT"/>intersection : bool<br ALIGN="LEFT"/>laneDetect<br ALIGN="LEFT"/>leftTurn : bool<br ALIGN="LEFT"/>logger<br ALIGN="LEFT"/>pipeRecvIntersection : PipeConnection<br ALIGN="LEFT"/>pipeSendIntersection : PipeConnection<br ALIGN="LEFT"/>queuesList<br ALIGN="LEFT"/>rightTurn : bool<br ALIGN="LEFT"/>sharedMemoryImage : SharedMemory<br ALIGN="LEFT"/>warpPerspective<br ALIGN="LEFT"/>|readInformation()<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DemoCarBFMC.perception.threads.threadSharedMemory.threadSharedMemory" [color="black", fontcolor="black", label=<{threadSharedMemory|debugger<br ALIGN="LEFT"/>events<br ALIGN="LEFT"/>logger<br ALIGN="LEFT"/>pipeRecvData : PipeConnection<br ALIGN="LEFT"/>queuesList<br ALIGN="LEFT"/>sharedMemoryImage : SharedMemory<br ALIGN="LEFT"/>|resizeWithBlackBars(image)<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DemoCarBFMC.perception.threads.threadSignDetection.threadSignDetection" [color="black", fontcolor="black", label=<{threadSignDetection|debugger<br ALIGN="LEFT"/>event<br ALIGN="LEFT"/>logger<br ALIGN="LEFT"/>queuesList<br ALIGN="LEFT"/>resize : tuple<br ALIGN="LEFT"/>sharedMemoryImage : SharedMemory<br ALIGN="LEFT"/>signDetection<br ALIGN="LEFT"/>warpPerspective<br ALIGN="LEFT"/>|run()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DemoCarBFMC.perception.threads.threadVisualOdometry.threadVisualOdometry" [color="black", fontcolor="black", label=<{threadVisualOdometry|crosswalkStepCounter : int<br ALIGN="LEFT"/>debugger<br ALIGN="LEFT"/>event<br ALIGN="LEFT"/>laneDetected : NoneType, bool<br ALIGN="LEFT"/>laneMiddle : NoneType<br ALIGN="LEFT"/>logger<br ALIGN="LEFT"/>orientation : float<br ALIGN="LEFT"/>orientation_deg : float<br ALIGN="LEFT"/>pipeRecvLaneDetected : PipeConnection<br ALIGN="LEFT"/>pipeRecvMiddleLine : PipeConnection<br ALIGN="LEFT"/>plot : bool<br ALIGN="LEFT"/>queuesList<br ALIGN="LEFT"/>setSpeed : bool<br ALIGN="LEFT"/>signCounter : int<br ALIGN="LEFT"/>signType : NoneType<br ALIGN="LEFT"/>x : float<br ALIGN="LEFT"/>y : float<br ALIGN="LEFT"/>|initSubscribeMessages()<br ALIGN="LEFT"/>readInformation()<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"DemoCarBFMC.perception.processCameraDetection.processCameraDetection" -> "Brain.src.templates.workerprocess.WorkerProcess" [arrowhead="empty", arrowtail="none"];
"DemoCarBFMC.perception.threads.threadDisplay.threadDisplay" -> "Brain.src.templates.threadwithstop.ThreadWithStop" [arrowhead="empty", arrowtail="none"];
"DemoCarBFMC.perception.threads.threadIntersectionDetection.threadIntersectionDetection" -> "Brain.src.templates.threadwithstop.ThreadWithStop" [arrowhead="empty", arrowtail="none"];
"DemoCarBFMC.perception.threads.threadLaneDetection.threadLaneDetection" -> "Brain.src.templates.threadwithstop.ThreadWithStop" [arrowhead="empty", arrowtail="none"];
"DemoCarBFMC.perception.threads.threadSharedMemory.threadSharedMemory" -> "Brain.src.templates.threadwithstop.ThreadWithStop" [arrowhead="empty", arrowtail="none"];
"DemoCarBFMC.perception.threads.threadSignDetection.threadSignDetection" -> "Brain.src.templates.threadwithstop.ThreadWithStop" [arrowhead="empty", arrowtail="none"];
"DemoCarBFMC.perception.threads.threadVisualOdometry.threadVisualOdometry" -> "Brain.src.templates.threadwithstop.ThreadWithStop" [arrowhead="empty", arrowtail="none"];
"numpy.core.numerictypes.int32" -> "numpy.core.numerictypes.signedinteger" [arrowhead="empty", arrowtail="none"];
".ndarray" -> ".ndarray" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="T", style="solid"];
".ndarray" -> ".ndarray" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="flat", style="solid"];
".ndarray" -> ".ndarray" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="imag", style="solid"];
".ndarray" -> ".ndarray" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="real", style="solid"];
".ndarray" -> ".ndarray" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shape", style="solid"];
".ndarray" -> ".ndarray" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="T", style="solid"];
".ndarray" -> ".ndarray" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="flat", style="solid"];
".ndarray" -> ".ndarray" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="imag", style="solid"];
".ndarray" -> ".ndarray" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="real", style="solid"];
".ndarray" -> ".ndarray" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shape", style="solid"];
".ndarray" -> ".ndarray" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="T", style="solid"];
".ndarray" -> ".ndarray" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="flat", style="solid"];
".ndarray" -> ".ndarray" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="imag", style="solid"];
".ndarray" -> ".ndarray" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="real", style="solid"];
".ndarray" -> ".ndarray" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="shape", style="solid"];
".ndarray" -> "DemoCarBFMC.perception.threads.sign_detection.signDetection.ColorSegmentation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="morphKernel", style="solid"];
".ndarray" -> "DemoCarBFMC.perception.threads.sign_detection.signDetection.ImageEnhancement" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="unsharpMask", style="solid"];
".ndarray" -> "DemoCarBFMC.perception.threads.sign_detection.signDetection.ImageEnhancement" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sharpenedImage", style="solid"];
".ndarray" -> "DemoCarBFMC.perception.threads.sign_detection.signDetection.ImageSegmentation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="morphKernel", style="solid"];
"DemoCarBFMC.perception.threads.sign_detection.signDetection.ColorSegmentation" -> "DemoCarBFMC.perception.threads.sign_detection.signDetection.SignDetection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="colorSegmentation", style="solid"];
"DemoCarBFMC.perception.threads.sign_detection.signDetection.ImageClassifier" -> "DemoCarBFMC.perception.threads.sign_detection.signDetection.SignDetection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="imageClassifier", style="solid"];
"numpy.core.numerictypes.int32" -> "DemoCarBFMC.perception.threads.lane_detection.laneDetect.LaneDetect" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="widowMinPixels", style="solid"];
"numpy.core.numerictypes.int32" -> "DemoCarBFMC.perception.threads.lane_detection.laneDetect.LaneDetect" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="windowWidth", style="solid"];
"numpy.core.numerictypes.int32" -> "DemoCarBFMC.perception.threads.lane_detection.laneDetect.LaneDetect" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="windowHeight", style="solid"];
"numpy.core.numerictypes.int32" -> "DemoCarBFMC.perception.threads.threadIntersectionDetection.threadIntersectionDetection" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="regionOfInterest", style="solid"];
}
